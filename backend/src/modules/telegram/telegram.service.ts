import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Telegraf, Context, Markup } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Appointment } from '../appointments/appointments.entity';
import { Client } from '../clients/clients.entity';
import { Service } from '../services/services.entity';
import { Branch } from '../branches/branches.entity';
import { AppointmentStatus } from '../../shared/enums/appointment-status.enum';
import { Source } from '../../shared/enums/source.enum';
import { ClientsService } from '../clients/clients.service';
import { AppointmentsService } from '../appointments/appointments.service';
import { BranchesService } from '../branches/branches.service';
import { ServicesService } from '../services/services.service';
import { telegramConfig } from '../../config/telegram.config';
import { Between, Not } from 'typeorm';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private bot: Telegraf;
  private userStates: Map<number, any> = new Map();
  private readonly ADMIN_CHAT_ID = '927338184';
  private readonly ADDITIONAL_CHAT_ID = '927338184';
  protected readonly GROUP_CHAT_ID = '-1002193338521';

  constructor(
    @InjectRepository(Appointment)
    private appointmentRepository: Repository<Appointment>,
    @InjectRepository(Client)
    private clientRepository: Repository<Client>,
    @InjectRepository(Service)
    private serviceRepository: Repository<Service>,
    @InjectRepository(Branch)
    private branchRepository: Repository<Branch>,
    private clientsService: ClientsService,
    private appointmentsService: AppointmentsService,
    private branchesService: BranchesService,
    private servicesService: ServicesService,
  ) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    this.bot = new Telegraf(token);
    this.setupBotCommands();
    this.initializeTestData();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
  async onModuleInit() {
    try {
      this.logger.log('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      await this.bot.launch();
      this.logger.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: ${error.message}`);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  private setupBotCommands() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start(async (ctx) => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
      await ctx.sendSticker('CAACAgIAAxkBAAEOR29n-DcppFsZIT4OxOVpTr9LoIOCEgACKkcAAmHaaEirAAENkFgUrmg2BA');
      
      return ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¶–í–ï–¢ –í–ó–ì–õ–Ø–î–ê —Ä–∞–¥—ã –í–∞–º. –î–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–∞–¥—É–∂–∫—É –≥–ª–∞–∑!\n\n' + 
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/appointment - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º\n' +
        '/mybookings - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n' +
        '/price - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å\n' +
        '/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n' +
        '/help - –ü–æ–º–æ—â—å',
        Markup.keyboard([
          ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'],
          ['üí∞ –ü—Ä–∞–π—Å', '‚ùì –ü–æ–º–æ—â—å']
        ]).resize()
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.help((ctx) => {
      return ctx.reply(
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/appointment - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º\n' +
        '/mybookings - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n' +
        '/price - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å\n' +
        '/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
      );
    });

    // –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º
    this.bot.command('appointment', (ctx) => this.startAppointmentFlow(ctx));
    this.bot.hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', (ctx) => this.startAppointmentFlow(ctx));

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.command('mybookings', (ctx) => this.showUserAppointments(ctx));
    this.bot.hears('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', (ctx) => this.showUserAppointments(ctx));

    // –ü–æ–º–æ—â—å
    this.bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) => {
      return ctx.reply(
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/appointment - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º\n' +
        '/mybookings - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n' +
        '/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
      );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    this.bot.command('admin', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId || userId.toString() !== this.ADMIN_CHAT_ID) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
      }

      await ctx.reply(
        'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n' +
        '/allbookings - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n' +
        '/todaybookings - –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
        '/tomorrowbookings - –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n' +
        '/cancel_id {ID} - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID',
        Markup.keyboard([
          ['üìã –í—Å–µ –∑–∞–ø–∏—Å–∏', 'üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
          ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', 'üîô –ù–∞–∑–∞–¥']
        ]).resize()
      );
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    this.bot.command('allbookings', async (ctx) => await this.showAdminAppointments(ctx, 'all'));
    this.bot.hears('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏', async (ctx) => await this.showAdminAppointments(ctx, 'all'));

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    this.bot.command('todaybookings', async (ctx) => await this.showAdminAppointments(ctx, 'today'));
    this.bot.hears('üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => await this.showAdminAppointments(ctx, 'today'));

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    this.bot.command('tomorrowbookings', async (ctx) => await this.showAdminAppointments(ctx, 'tomorrow'));
    this.bot.hears('üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', async (ctx) => await this.showAdminAppointments(ctx, 'tomorrow'));

    // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    this.bot.command('cancel_id', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId || userId.toString() !== this.ADMIN_CHAT_ID) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
      }

      const appointmentId = ctx.message.text.split(' ')[1];
      if (!appointmentId) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏. –ü—Ä–∏–º–µ—Ä: /cancel_id 123');
        return;
      }

      try {
        const appointment = await this.appointmentRepository.findOne({
          where: { id: parseInt(appointmentId) },
          relations: ['client', 'service', 'branch']
        });

        if (!appointment) {
          await ctx.reply(`–ó–∞–ø–∏—Å—å —Å ID ${appointmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        if (appointment.status === AppointmentStatus.CANCELLED) {
          await ctx.reply(`–ó–∞–ø–∏—Å—å #${appointmentId} —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ.`);
          return;
        }

        await this.appointmentsService.update(parseInt(appointmentId), { 
          status: AppointmentStatus.CANCELLED 
        });

        const message = `‚ùå –ó–∞–ø–∏—Å—å #${appointmentId} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await this.bot.telegram.sendMessage(this.GROUP_CHAT_ID, message);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try {
          await this.bot.telegram.sendMessage(
            appointment.sourceId,
            '‚ùóÔ∏è –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
          );
        } catch (error) {
          this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
        }

        await ctx.reply(`‚úÖ –ó–∞–ø–∏—Å—å #${appointmentId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: ${error.message}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏
    this.bot.action(/cancel_appointment:(\d+)/, async (ctx) => {
      try {
        const userId = ctx.from?.id;
        if (!userId) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return;
        }

        const appointmentId = +ctx.match[1];
        const appointment = await this.appointmentRepository.findOne({
          where: { id: appointmentId },
          relations: ['client']
        });

        if (!appointment) {
          await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        if (appointment.status === AppointmentStatus.CANCELLED) {
          await ctx.answerCbQuery('–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å
        const isAdmin = userId.toString() === this.ADMIN_CHAT_ID;
        const isOwner = appointment.sourceId === userId.toString();

        if (!isAdmin && !isOwner) {
          await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏');
          return;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
        if (isAdmin) {
          await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          await ctx.editMessageReplyMarkup({
            inline_keyboard: [
              [{ text: '‚ùå –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: `simple_cancel:${appointmentId}` }],
              [{ text: 'üìù –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã', callback_data: `cancel_with_reason:${appointmentId}` }]
            ]
          });
          return;
        }

        // –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å
        await this.processSimpleCancellation(ctx, appointment, isAdmin, isOwner);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: ${error.message}`);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–º–µ–Ω—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
    this.bot.action(/simple_cancel:(\d+)/, async (ctx) => {
      try {
        const userId = ctx.from?.id;
        if (!userId) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return;
        }
        
        const appointmentId = +ctx.match[1];
        const appointment = await this.appointmentRepository.findOne({
          where: { id: appointmentId },
          relations: ['client']
        });
        
        if (!appointment) {
          await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return;
        }
        
        const isAdmin = userId.toString() === this.ADMIN_CHAT_ID;
        const isOwner = appointment.sourceId === userId.toString();
        
        await this.processSimpleCancellation(ctx, appointment, isAdmin, isOwner);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: ${error.message}`);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
    this.bot.action(/cancel_with_reason:(\d+)/, async (ctx) => {
      try {
        const userId = ctx.from?.id;
        if (!userId) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return;
        }
        
        const appointmentId = +ctx.match[1];
        await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∂–¥–µ–º –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
        this.userStates.set(userId, {
          waitingFor: 'cancellation_reason',
          appointmentId: appointmentId
        });
        
        await ctx.editMessageText(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:',
          { 
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã', callback_data: `simple_cancel:${appointmentId}` }]
              ]
            }
          }
        );
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã: ${error.message}`);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    this.bot.action('new_appointment', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(userId);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.deleteMessage();

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
      await this.startAppointmentFlow(ctx);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
    this.bot.action(/select_branch:(\d+)/, async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞');
        return;
      }
      
      const branchId = +ctx.match[1];
      const state = this.userStates.get(userId);
      
      this.logger.log(`–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: branchId=${branchId}`);
      this.logger.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
      
      if (!state || state.waitingFor !== 'branch') {
        this.logger.error(`–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞: ${state?.waitingFor}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
        return;
      }
      
      try {
        state.branchId = branchId;
        state.waitingFor = 'service';
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        const services = await this.serviceRepository.find({ where: { isActive: true } });
        
        if (!services || services.length === 0) {
          throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥');
        }
        
        const buttons = services.map(service => 
          Markup.button.callback(service.name, `select_service:${service.id}`)
        );
        
        await ctx.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:',
          Markup.inlineKeyboard(buttons, { columns: 1 })
        );
        
        this.userStates.set(userId, state);
        this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞: ${JSON.stringify(state)}`);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞: ${error.message}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        this.userStates.delete(userId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    this.bot.action(/select_service:(\d+)/, async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏');
        return;
      }
      
      const serviceId = +ctx.match[1];
      const state = this.userStates.get(userId);
      
      this.logger.log(`–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: serviceId=${serviceId}`);
      this.logger.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
      
      if (!state || state.waitingFor !== 'service') {
        this.logger.error(`–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏: ${state?.waitingFor}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
        return;
      }
      
      try {
        state.serviceId = serviceId;
        state.waitingFor = 'date';
        
        await ctx.editMessageText(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2024):'
        );
        
        this.userStates.set(userId, state);
        this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏: ${JSON.stringify(state)}`);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏: ${error.message}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        this.userStates.delete(userId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    this.bot.action(/select_time:([0-9:]+)/, async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏');
        return;
      }
      
      const time = ctx.match[1];
      const state = this.userStates.get(userId);
      
      this.logger.log(`–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: time=${time}`);
      this.logger.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
      
      if (!state || state.waitingFor !== 'time') {
        this.logger.error(`–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: ${state?.waitingFor}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
        return;
      }
      
      try {
        this.logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...');
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        const client = await this.clientsService.create({
          name: state.clientName,
          phone: state.clientPhone,
          source: Source.TELEGRAM
        });
        this.logger.log(`–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${JSON.stringify(client)}`);

        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const [hours, minutes] = time.split(':').map(Number);
        const [day, month, year] = state.date.split('.').map(Number);
        // JavaScript –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 (—è–Ω–≤–∞—Ä—å - 0, –¥–µ–∫–∞–±—Ä—å - 11)
        const startDateTime = new Date(year, month - 1, day);
        startDateTime.setHours(hours, minutes, 0, 0);
        const endDateTime = new Date(startDateTime.getTime() + 60 * 60 * 1000);
        
        this.logger.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:
          clientId: ${client.id}
          branchId: ${state.branchId}
          serviceId: ${state.serviceId}
          startTime: ${startDateTime.toISOString()}
          endTime: ${endDateTime.toISOString()}
          date: ${state.date}, time: ${time}
          –û–±—ä–µ–∫—Ç startDateTime: ${startDateTime}
          –ì–æ–¥: ${startDateTime.getFullYear()}, –ú–µ—Å—è—Ü: ${startDateTime.getMonth()}, –î–µ–Ω—å: ${startDateTime.getDate()}
          –ß–∞—Å: ${startDateTime.getHours()}, –ú–∏–Ω—É—Ç—ã: ${startDateTime.getMinutes()}
        `);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ –¥–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã
        const appointmentData = {
          clientId: client.id,
          branchId: state.branchId,
          serviceId: state.serviceId,
          startTime: startDateTime, // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ Date, –Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
          endTime: endDateTime,     // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ Date, –Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
          source: Source.TELEGRAM,
          sourceId: userId.toString(),
          status: AppointmentStatus.SCHEDULED
        };
        
        this.logger.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${JSON.stringify({
          ...appointmentData,
          startTime: startDateTime.toISOString(),
          endTime: endDateTime.toISOString()
        })}`);

        this.logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...');
        const appointment = await this.appointmentsService.create(appointmentData);
        this.logger.log(`–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${appointment.id}`);
        this.logger.log(`–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: startTime=${appointment.startTime}, endTime=${appointment.endTime}`);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedDate = `${startDateTime.getDate().toString().padStart(2, '0')}.${(startDateTime.getMonth() + 1).toString().padStart(2, '0')}.${startDateTime.getFullYear()}`;
        const formattedTime = `${startDateTime.getHours().toString().padStart(2, '0')}:${startDateTime.getMinutes().toString().padStart(2, '0')}`;

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        const service = await this.serviceRepository.findOne({ where: { id: state.serviceId } });
        
        const confirmationMessage = '‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
          `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
          `‚è∞ –í—Ä–µ–º—è: ${formattedTime}\n` +
          `üè¢ –§–∏–ª–∏–∞–ª: 1 –°–æ–∫–æ–ª\n` +
          `üíá –£—Å–ª—É–≥–∞: ${service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üë§ –ò–º—è: ${state.clientName}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${state.clientPhone}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        this.logger.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
        await ctx.editMessageText(confirmationMessage);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
        await ctx.sendSticker('CAACAgQAAxkBAAEOR21n-DZL2QPs67iSRdJK7grd0jTbowACRggAAlCz8FMmPNNg2tnfcjYE');
        
        this.logger.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await this.sendNotifications(appointment, confirmationMessage);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (ctx.from) {
          this.userStates.delete(ctx.from.id);
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`);
        this.logger.error(`–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        if (ctx.from) {
          this.userStates.delete(ctx.from.id);
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"
    this.bot.action('choose_another_date', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      const state = this.userStates.get(userId);
      if (!state) return;

      state.waitingFor = 'date';
      this.userStates.set(userId, state);

      await ctx.editMessageText(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2024):'
      );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∞–π—Å–∞
    this.bot.command('price', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      const webAppUrl = `${process.env.WEB_APP_URL}/price?userId=${userId}`;
      
      await ctx.reply(
        'üí∞ –ù–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:',
        Markup.inlineKeyboard([
          [
            Markup.button.webApp('üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', webAppUrl),
            Markup.button.url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ', webAppUrl),
          ],
        ]),
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const userId = ctx.from?.id;
      if (!userId) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      const text = (ctx.message as any).text;
      const state = this.userStates.get(userId);
      
      this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${text}`);
      this.logger.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
      
      if (!state || !state.waitingFor) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.');
        return;
      }

      try {
        if (state.waitingFor === 'date') {
          const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.(20\d{2})$/;
          
          if (!dateRegex.test(text)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì)');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
          const [day, month, year] = text.split('.').map(Number);
          // JavaScript –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 (—è–Ω–≤–∞—Ä—å - 0, –¥–µ–∫–∞–±—Ä—å - 11)
          const selectedDate = new Date(year, month - 1, day);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è
          selectedDate.setHours(0, 0, 0, 0);
          
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          const tomorrow = new Date(today);
          tomorrow.setDate(tomorrow.getDate() + 1);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã: 
            –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: ${selectedDate.toString()} (${selectedDate.toISOString()})
            –°–µ–≥–æ–¥–Ω—è: ${today.toString()} (${today.toISOString()})
            –ó–∞–≤—Ç—Ä–∞: ${tomorrow.toString()} (${tomorrow.toISOString()})
            –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ < –ó–∞–≤—Ç—Ä–∞: ${selectedDate < tomorrow}
            –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ getTime(): ${selectedDate.getTime()}
            –ó–∞–≤—Ç—Ä–∞ getTime(): ${tomorrow.getTime()}
            –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å getTime(): ${selectedDate.getTime() < tomorrow.getTime()}
            –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: ${Math.floor((selectedDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))}
          `);
          
          // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–¥–æ–≤, –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π
          const isBeforeTomorrow = (
            selectedDate.getFullYear() < tomorrow.getFullYear() ||
            (selectedDate.getFullYear() === tomorrow.getFullYear() && 
              (selectedDate.getMonth() < tomorrow.getMonth() || 
                (selectedDate.getMonth() === tomorrow.getMonth() && 
                  selectedDate.getDate() < tomorrow.getDate())
              )
            )
          );
          
          if (isBeforeTomorrow) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è');
            return;
          }
          
          state.date = text;
          state.waitingFor = 'time';
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
          const availableTimeSlots = await this.getAvailableTimeSlots(text, state.branchId);
          
          if (availableTimeSlots.length === 0) {
            await ctx.reply(
              '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n' +
              '–í—ã –º–æ–∂–µ—Ç–µ:\n' +
              '1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É\n' +
              '2Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏',
              Markup.inlineKeyboard([
                [Markup.button.callback('üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', 'choose_another_date')],
                [Markup.button.url('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', 'https://t.me/NikaFloks')]
              ])
            );
            state.waitingFor = 'date';
            this.userStates.set(userId, state);
            return;
          }
          
          const buttons = availableTimeSlots.map(time => 
            Markup.button.callback(`‚è∞ ${time}`, `select_time:${time}`)
          );
          
          await ctx.reply(
            'üïí –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:',
            Markup.inlineKeyboard(buttons, { columns: 2 })
          );
          
          this.userStates.set(userId, state);
          this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: ${JSON.stringify(state)}`);
        } else {
          await this.handleUserResponse(ctx, state);
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        if (ctx.from) {
          this.userStates.delete(ctx.from.id);
        }
      }
    });
  }

  // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
  private async startAppointmentFlow(ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    try {
      this.logger.log(`–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      // –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const initialState = {
        waitingFor: 'name',
        clientName: null,
        clientPhone: null,
        branchId: null,
        serviceId: null,
        date: null,
        time: null
      };
      
      this.userStates.set(userId, initialState);
      this.logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${JSON.stringify(initialState)}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
  private async handleUserResponse(ctx: Context, state: any) {
    const userId = ctx.from?.id;
    if (!userId) return;
    
    const text = (ctx.message as any).text;
    this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${text}`);
    this.logger.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);
    
    try {
      switch (state.waitingFor) {
        case 'name':
          this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          state.clientName = text;
          state.waitingFor = 'phone';
          await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
          this.userStates.set(userId, state);
          this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: ${JSON.stringify(this.userStates.get(userId))}`);
          break;
          
        case 'phone':
          this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          state.clientPhone = text;
          state.waitingFor = 'branch';
          
          try {
            const startTime = Date.now();
            // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
            const branches = [
              { id: 1, name: '1 –°–æ–∫–æ–ª' },
              // { id: 2, name: '–ú–æ—Å–∫–≤–∞' },
              // { id: 3, name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª 1' },
              // { id: 4, name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª 2' }
            ];
            
            const buttons = branches.map(branch => Markup.button.callback(branch.name, `select_branch:${branch.id}`));
            
            await ctx.reply(
              '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:',
              Markup.inlineKeyboard(buttons, { columns: 1 })
            );
            
            this.userStates.set(userId, state);
            const endTime = Date.now();
            this.logger.log(`–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞: ${endTime - startTime}ms`);
            this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${JSON.stringify(this.userStates.get(userId))}`);
          } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤: ${error.message}`);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            this.userStates.delete(userId);
          }
          break;
          
        case 'cancellation_reason':
          this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          await this.processCancellationWithReason(ctx, state.appointmentId, text);
          break;
          
        default:
          this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${state.waitingFor}`);
          await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.');
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      if (ctx.from) {
        this.userStates.delete(ctx.from.id);
      }
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async showUserAppointments(ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    try {
      const appointments = await this.appointmentRepository.find({
        where: { 
          sourceId: userId.toString(),
          source: Source.TELEGRAM
        },
        relations: ['client', 'service', 'branch']
      });
      
      if (appointments.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.');
        return;
      }
      
      for (const appointment of appointments) {
        const date = new Date(appointment.startTime);
        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
        
        const client = await this.clientsService.findOne(appointment.clientId);
        if (!client) {
          this.logger.warn(`–ö–ª–∏–µ–Ω—Ç —Å ID ${appointment.clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }
        
        await ctx.reply(
          `üìÖ <b>–ó–∞–ø–∏—Å—å #${appointment.id}</b>\n` +
          `üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate}\n` +
          `üè¢ –§–∏–ª–∏–∞–ª: ${appointment.branch?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üíá –£—Å–ª—É–≥–∞: ${appointment.service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üìù –°—Ç–∞—Ç—É—Å: ${this.getStatusText(appointment.status)}`,
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', `cancel_appointment:${appointment.id}`)
            ])
          }
        );
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
  private getStatusText(status: AppointmentStatus): string {
    const statusMap = {
      [AppointmentStatus.SCHEDULED]: '‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
      [AppointmentStatus.CONFIRMED]: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
      [AppointmentStatus.COMPLETED]: '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      [AppointmentStatus.CANCELLED]: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
      [AppointmentStatus.NO_SHOW]: '‚õîÔ∏è –ù–µ —è–≤–∏–ª—Å—è'
    };
    return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  private async sendNotifications(appointment: Appointment, confirmationMessage: string) {
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
      this.logger.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É...');
      await this.bot.telegram.sendMessage(
        this.GROUP_CHAT_ID,
        `üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n${confirmationMessage}`
      );
      this.logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      this.logger.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...');
      await this.bot.telegram.sendMessage(
        this.ADMIN_CHAT_ID,
        `üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n${confirmationMessage}\n\n` +
        `üÜî ID –∑–∞–ø–∏—Å–∏: ${appointment.id}`
      );
      this.logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.logger.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
      await this.bot.telegram.sendMessage(
        this.ADDITIONAL_CHAT_ID,
        `üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n${confirmationMessage}\n\n` +
        `üÜî ID –∑–∞–ø–∏—Å–∏: ${appointment.id}`
      );
      this.logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  private async getAvailableTimeSlots(date: string, branchId: number): Promise<string[]> {
    try {
      // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
      const allTimeSlots = ['16:00', '17:00', '18:00', '19:00'];
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      const [day, month, year] = date.split('.').map(Number);
      // JavaScript –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 (—è–Ω–≤–∞—Ä—å - 0, –¥–µ–∫–∞–±—Ä—å - 11)
      const selectedDate = new Date(year, month - 1, day);
      selectedDate.setHours(0, 0, 0, 0);
      
      const nextDay = new Date(selectedDate);
      nextDay.setDate(nextDay.getDate() + 1);
      
      this.logger.log(`–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É: ${selectedDate.toISOString()}, nextDay: ${nextDay.toISOString()}`);
      
      const existingAppointments = await this.appointmentRepository.find({
        where: {
          branchId: branchId,
          startTime: Between(selectedDate, nextDay),
          status: Not(AppointmentStatus.CANCELLED) // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        }
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
      const bookedTimes = existingAppointments.map(appointment => {
        const time = new Date(appointment.startTime);
        return `${time.getHours().toString().padStart(2, '0')}:${time.getMinutes().toString().padStart(2, '0')}`;
      });

      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${existingAppointments.length} –∑–∞–ø–∏—Å–µ–π, –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã: ${bookedTimes.join(', ')}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
      return allTimeSlots.filter(time => !bookedTimes.includes(time));
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${error.message}`);
      return [];
    }
  }

  private async initializeTestData() {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã
      const branches = await this.branchRepository.find();
      if (branches.length === 0) {
        const branch1 = this.branchRepository.create({
          name: '–¶–≤–µ—Ç –í–∑–≥–ª—è–¥–∞ - –¶–µ–Ω—Ç—Ä',
          address: '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1',
          phone: '+7 (123) 456-78-90',
          isActive: true,
          workingHoursStart: '09:00',
          workingHoursEnd: '21:00',
        });

        const branch2 = this.branchRepository.create({
          name: '–¶–≤–µ—Ç –í–∑–≥–ª—è–¥–∞ - –°–µ–≤–µ—Ä',
          address: '—É–ª. –°–µ–≤–µ—Ä–Ω–∞—è, 2',
          phone: '+7 (123) 456-78-91',
          isActive: true,
          workingHoursStart: '10:00',
          workingHoursEnd: '20:00',
        });

        await this.branchRepository.save([branch1, branch2]);
        this.logger.log('–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã');
      }

      // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
      const services = await this.serviceRepository.find();
      if (services.length === 0) {
        const branch1 = await this.branchRepository.findOne({ where: { name: '–¶–≤–µ—Ç –í–∑–≥–ª—è–¥–∞ - –¶–µ–Ω—Ç—Ä' } });
        const branch2 = await this.branchRepository.findOne({ where: { name: '–¶–≤–µ—Ç –í–∑–≥–ª—è–¥–∞ - –°–µ–≤–µ—Ä' } });

        if (branch1) {
          const service1 = this.serviceRepository.create({
            name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
            price: 1500,
            category: '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∂–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
            duration: 60,
            branchId: branch1.id,
            isActive: true,
          });

          const service2 = this.serviceRepository.create({
            name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
            price: 3000,
            category: '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
            description: '–ü–æ–ª–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
            duration: 120,
            branchId: branch1.id,
            isActive: true,
          });

          await this.serviceRepository.save([service1, service2]);
        }

        if (branch2) {
          const service3 = this.serviceRepository.create({
            name: '–ú–∞–Ω–∏–∫—é—Ä',
            price: 1000,
            category: '–ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä',
            duration: 60,
            branchId: branch2.id,
            isActive: true,
          });

          await this.serviceRepository.save(service3);
        }

        this.logger.log('–¢–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏ —Å–æ–∑–¥–∞–Ω—ã');
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  private async showAdminAppointments(ctx: Context, type: 'all' | 'today' | 'tomorrow') {
    const userId = ctx.from?.id;
    if (!userId || userId.toString() !== this.ADMIN_CHAT_ID) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
      return;
    }

    try {
      let whereCondition: any = {};
      const now = new Date();
      
      if (type === 'today') {
        const endOfDay = new Date(now);
        endOfDay.setHours(23, 59, 59, 999);
        whereCondition = {
          startTime: Between(now, endOfDay)
        };
      } else if (type === 'tomorrow') {
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 0, 0, 0);
        const endOfTomorrow = new Date(tomorrow);
        endOfTomorrow.setHours(23, 59, 59, 999);
        whereCondition = {
          startTime: Between(tomorrow, endOfTomorrow)
        };
      }

      const appointments = await this.appointmentRepository.find({
        where: whereCondition,
        relations: ['client', 'service', 'branch'],
        order: { startTime: 'ASC' }
      });

      if (appointments.length === 0) {
        await ctx.reply(type === 'all' ? 
          '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.' : 
          `–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ ${type === 'today' ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞'}.`
        );
        return;
      }

      for (const appointment of appointments) {
        const date = new Date(appointment.startTime);
        const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
        
        await ctx.reply(
          `üìÖ <b>–ó–∞–ø–∏—Å—å #${appointment.id}</b>\n` +
          `üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate}\n` +
          `üë§ –ö–ª–∏–µ–Ω—Ç: ${appointment.client?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.client?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üè¢ –§–∏–ª–∏–∞–ª: ${appointment.branch?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üíá –£—Å–ª—É–≥–∞: ${appointment.service?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üìù –°—Ç–∞—Ç—É—Å: ${this.getStatusText(appointment.status)}`,
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              [
                Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_appointment:${appointment.id}`),
                Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `tg://user?id=${appointment.sourceId}`)
              ]
            ])
          }
        );
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–º–µ–Ω—ã
  private async processSimpleCancellation(ctx: Context, appointment: Appointment, isAdmin: boolean, isOwner: boolean) {
    const appointmentId = appointment.id;
    
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    await this.appointmentsService.update(appointmentId, { 
      status: AppointmentStatus.CANCELLED 
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    const message = `